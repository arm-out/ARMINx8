set     0
movo    r0  r15     // r15 = i = 0

set     3
movi    r0  r1
set     32
lwr     r0
lsr     r2          // r2 = PATTERN

CTB_BEGIN
set     31          
movi    r0  r1      // pattern mask
movi    r15 r0
lwr     r0          // MEM[i]
and     r0
movi    r2  r1
xor     r1
set     0
bneq    WINDOW_2
inc     r14

WINDOW_2
set     1
movi    r0  r1
movi    r15 r0
lwr     r0
lsr     r3

set     31          
movi    r0  r1      // pattern mask
movi    r3 r0
and     r0
movi    r2  r1
xor     r1
set     0
bneq    WINDOW_3
inc     r14

WINDOW_3
set     2
movi    r0  r1
movi    r15 r0
lwr     r0
lsr     r3

set     31          
movi    r0  r1      // pattern mask
movi    r3 r0
and     r0
movi    r2  r1
xor     r1
set     0
bneq    WINDOW_4
inc     r14

WINDOW_4
set     3
movi    r0  r1
movi    r15 r0
lwr     r0
lsr     r3

set     31          
movi    r0  r1      // pattern mask
movi    r3 r0
and     r0
movi    r2  r1
xor     r1
set     0
bneq    NEXT_CTB
inc     r14

NEXT_CTB
inc     r15         // i++
set     32
movi    r15 r1
bneq    CTB_BEGIN

set     33
swr     r14 

// =============================================

// CTO PHASE
set     0
movo    r0  r15     // r15 = i = 0
movo    r0  r14     // r15 = count = 0

CTO_BEGIN
set     31          
movi    r0  r1      // pattern mask
movi    r15 r0
lwr     r0          // MEM[i]
and     r0
movi    r2  r1
xor     r1
set     0
beq     INC_CTO

set     1
movi    r0  r1
movi    r15 r0
lwr     r0
lsr     r3

set     31          
movi    r0  r1      // pattern mask
movi    r3 r0
and     r0
movi    r2  r1
xor     r1
set     0
beq    INC_CTO

set     2
movi    r0  r1
movi    r15 r0
lwr     r0
lsr     r3

set     31          
movi    r0  r1      // pattern mask
movi    r3 r0
and     r0
movi    r2  r1
xor     r1
set     0
beq     INC_CTO

set     3
movi    r0  r1
movi    r15 r0
lwr     r0
lsr     r3

set     31          
movi    r0  r1      // pattern mask
movi    r3 r0
and     r0
movi    r2  r1
xor     r1
set     0
bneq    NEXT_CTO

INC_CTO
inc     r14         // FOUND MATCH

NEXT_CTO

inc     r15         // i++
set     32
movi    r15 r1
bneq    CTO_BEGIN

set     34
swr     r14 

// =============================================

// CTS PHASE
set     0
movo    r0  r15     // r15 = i = 0
movo    r0  r14     // r15 = count = 0
movo    r0  r3      // r3 = j

CTS_BEGIN
// store current and next word
movi    r15 r0      // curr idx
lwr     r4          // r4 = MEM[i]
inc     r0
lwr     r5          // r5 = MEM[i+1]

movi    r4  r0
movi    r3  r1
lsr     r4          // r4 >> j
set     8
sub     r1
movi    r5  r0
lsl     r0          // r5 << (8-j)
movi    r4  r1
or      r1
set     31
and     r0
movi    r2  r1
xor     r1
set     0
bneq    CTS_CONT
inc     r14

CTS_CONT
set     7
movi    r3  r1
inc     r3
bneq    CTS_BEGIN

inc     r15         // i++
set     0
movo    r0  r3
set     31
movi    r15 r1
bneq    CTS_BEGIN

// FINAL CTS ITERATION
set     31
lwr     r1
set     31
and     r0
movi    r2  r1
xor     r1
set     0
bneq    FINAL_2
inc     r14

FINAL_2
set     1
movi    r0  r1
set     31
lwr     r0
lsr     r1
set     31
and     r0
movi    r2  r1
xor     r1
set     0
bneq    FINAL_3
inc     r14

FINAL_3
set     2
movi    r0  r1
set     31
lwr     r0
lsr     r1
set     31
and     r0
movi    r2  r1
xor     r1
set     0
bneq    FINAL_4
inc     r14

FINAL_4
set     3
movi    r0  r1
set     31
lwr     r0
lsr     r1
set     31
and     r0
movi    r2  r1
xor     r1
set     0
bneq    DONE
inc     r14

DONE
set     35
swr     r14

halt                // done